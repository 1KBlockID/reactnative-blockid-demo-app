import type { TotpResponse } from './WrapperModel';
export declare function setLicenseKey(licenseKey: string): Promise<boolean>;
export declare function initiateTempWallet(): Promise<boolean>;
export declare function registerTenantWith(tag: string, community: string, dns: string): Promise<boolean>;
export declare function isReady(): Promise<boolean>;
export declare function enrollDeviceAuth(): Promise<boolean>;
export declare function isDeviceAuthRegisterd(): Promise<boolean>;
export declare function verifyDeviceAuth(): Promise<boolean>;
export declare function totp(): Promise<TotpResponse | null>;
export declare function isLiveIDRegisterd(): Promise<boolean>;
export declare function startLiveIDScanning(dvcID: string): Promise<void>;
export declare function stopLiveIDScanning(): Promise<void>;
export declare function resetSDK(tag: string, community: string, dns: string, licenseKey: string, reason: string): Promise<boolean>;
export declare function startQRScanning(): Promise<string | null>;
export declare function stopQRScanning(): Promise<boolean>;
export declare function isUrlTrustedSessionSources(url: string): Promise<boolean>;
export declare function getScopesAttributesDic(data: Object): Promise<Map<string, any> | null>;
export declare function authenticateUserWithScopes(data: Object): Promise<boolean>;
export declare function getUserDocument(type: number): Promise<string | null>;
export declare function scanDocument(type: number): Promise<string | null>;
export declare function registerNationalIDWithLiveID(data: Object, face: string, proofedBy: string): Promise<boolean>;
export declare function registerDrivingLicenceWithLiveID(data: Object, face: string, proofedBy: string): Promise<boolean>;
export declare function registerPassportWithLiveID(data: Object, face: string, proofedBy: string): Promise<boolean>;
//# sourceMappingURL=index.d.ts.map